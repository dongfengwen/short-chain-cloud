#server.port=8003
#spring.application.name=dcloud-link-service
#
##服务注册发现
#spring.cloud.nacos.discovery.server-addr=120.79.150.146:8848
#spring.cloud.nacos.discovery.username=nacos
#spring.cloud.nacos.discovery.password=nacos
#
#
##用于rpc调用token验证
#rpc.token=xdclass.net168
#
##分库分表配置
#spring.shardingsphere.datasource.names=ds0,ds1,dsa
#spring.shardingsphere.props.sql.show=true
#
##ds0配置
#spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
#spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
#spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
#spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
#spring.shardingsphere.datasource.ds0.maxPoolSize=50
#spring.shardingsphere.datasource.ds0.minPoolSize=50
#spring.shardingsphere.datasource.ds0.username=root
#spring.shardingsphere.datasource.ds0.password=xdclass.net168
#
##ds1配置
#spring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000
#spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000
#spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000
#spring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000
#spring.shardingsphere.datasource.ds1.maxPoolSize=50
#spring.shardingsphere.datasource.ds1.minPoolSize=50
#spring.shardingsphere.datasource.ds1.username=root
#spring.shardingsphere.datasource.ds1.password=xdclass.net168
#
##dsa配置
#spring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000
#spring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000
#spring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#spring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000
#spring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000
#spring.shardingsphere.datasource.dsa.maxPoolSize=50
#spring.shardingsphere.datasource.dsa.minPoolSize=50
#spring.shardingsphere.datasource.dsa.username=root
#spring.shardingsphere.datasource.dsa.password=xdclass.net168
#
#
##----------配置默认数据库，比如短链域名，不分库分表--------------
#spring.shardingsphere.sharding.default-data-source-name=ds0
##默认id生成策略
#spring.shardingsphere.sharding.default-key-generator.column=id
#spring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}
#
#
#
#
##----------短链组，策略：水平分库，水平分表(1张表)--------------
## 先进行水平分库， 水平分库策略，行表达式分片
#spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no
#spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}
#
#
##----------短链，策略：分库+分表--------------
## 先进行水平分库，然后再水平分表
#spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code
#spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomDBPreciseShardingAlgorithm
#
#
## 水平分表策略，自定义策略。   真实库.逻辑表
#spring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link
#spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code
#spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomTablePreciseShardingAlgorithm
#
#
#
#
###---------- 组+短链码mapping表，策略：分库+分表--------------
## 先进行水平分库，然后再水平分表， 水平分库策略，行表达式分片
#spring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.sharding-column=account_no
#spring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}
#
## 分表策略+行表达式分片
#spring.shardingsphere.sharding.tables.group_code_mapping.actual-data-nodes=ds$->{0..1}.group_code_mapping_$->{0..1}
#spring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.sharding-column=group_id
#spring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.algorithm-expression=group_code_mapping_$->{group_id % 2}
#
#
#
#
#
#
#
###----------rabbit配置--------------
#spring.rabbitmq.host=120.79.150.146
#spring.rabbitmq.port=5672
##需要手工创建虚拟主机
#spring.rabbitmq.virtual-host=dev
#spring.rabbitmq.username=admin
#spring.rabbitmq.password=password
##消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息
#spring.rabbitmq.listener.simple.acknowledge-mode=auto
#
#
##开启重试，消费者代码不能添加try catch捕获不往外抛异常
#spring.rabbitmq.listener.simple.retry.enabled=true
##最大重试次数
#spring.rabbitmq.listener.simple.retry.max-attempts=4
## 重试消息的时间间隔，5秒
#spring.rabbitmq.listener.simple.retry.initial-interval=5000
#
#
##-------redis连接配置-------
#spring.redis.client-type=jedis
#spring.redis.host=120.79.150.146
#spring.redis.password=xdclass.net
#spring.redis.port=6379
#spring.redis.jedis.pool.max-active=100
#spring.redis.jedis.pool.max-idle=100
#spring.redis.jedis.pool.min-idle=100
#spring.redis.jedis.pool.max-wait=60000
#
#
##----------kafka配置--------------
#spring.kafka.bootstrap-servers=120.79.150.146:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer